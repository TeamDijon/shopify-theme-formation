{% liquid
  echo 'exercises.css' | asset_url | stylesheet_tag
  echo 'exercises.js' | asset_url | script_tag | replace_first: 'text/javascript', 'module'
%}

<div class="exercises">
  {% liquid
    # Ici, on peut déclarer des variables qui pourront être utilisées dans tous les exercices
  %}

  <h1>Exercices Schéma</h1>

  <div class="exercise-container">
    <h4 class="title">Exercice #1: Texte personnalisable</h4>
    <span>- Dans le schéma de la section, mettez en place un paramètre de section</span>
    <span>- De type "text", avec un ID de votre choix, faites apparaître le paramètre</span>
    <span
      >Note: Pour modifier la valeur du paramètre, possible d'aller dans le customiseur de thème ou directement dans le
      JSON</span
    >
  </div>

  {% liquid
    # Logique ici
    assign my_text_parameter = section.settings.first_text
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {% if my_text_parameter != blank %}
      <p>{{ my_text_parameter }}</p>
    {% endif %}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #2: Sélecteur de collection</h4>
    <span>- Dans le schéma de la section, mettez en place un paramètre de section</span>
    <span>- De type "collection", avec un ID de votre choix</span>
    <span>- Affichez, pour tous les produits de la collection sélectionnée, les titres des produits associés</span>
  </div>

  {% liquid
    # Logique ici
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {% for product in section.settings.first_collection.products %}
      <p>{{ product.title }}</p>
    {% endfor %}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #3: Afficher une image personnalisée</h4>
    <span>- Dans le schéma de la section, mettez en place un paramètre de section</span>
    <span>- De type "image_picker", avec un ID de votre choix</span>
    <span>- En utilisant les filtres d'image, affichez l'image sélectionnée si configurée</span>
  </div>

  {% liquid
    # Logique ici
    assign image_markup = section.settings.first_image | image_url: width: 320 | image_tag
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {{ image_markup }}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #4: Créer un metafield de page</h4>
    <span>- Dans le back-office, créer un metafield de type "texte", définition au choix</span>
    <span>- Remplissez le metafield pour la page sur laquelle vous travaillez actuellement</span>
    <span>- Dans le code, affichez le metafield dans la boîte de réponse</span>
  </div>

  {% liquid
    # Logique ici
    assign metafield_value = page.metafields.custom.mon_premier_metafield.value
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {{ metafield_value }} - {% if page.metafields.custom.mon_premier_metafield.value != blank %}{% endif %}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #5: Choix de la couleur</h4>
    <span>- Dans le schéma, créez un paramètre de type couleur</span>
    <span>- Faites apparaître le code couleur dans la boîte de réponse</span>
    <span>- Difficile: Utilisez la donnée pour changer la couleur d'arrière plan de la boîte de réponse</span>
  </div>

  {% liquid
    # Logique ici
  %}
  <div
    class="answer-container {% if my_text_parameter != blank %}there-is-text{% endif %}"
    style="--background-color: {{ section.settings.answer_box_background_color }}; --color: {{ section.settings.answer_box_color }}"
  >
    {% # Affichage ici %}
    Et voilà, ma boîte de réponse dépend de metafields grâce aux références dynamiques!
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #6: Bloc de section</h4>
    <span>- Dans le schéma, créez un bloc de type "button"</span>
    <span>- Dans le schéma de bloc, ajoutez un paramètre de type "url" et un paramètre de type "text"</span>
    <span>- Dans le customiseur, créez plusieurs instances de bloc</span>
    <span>- Dans le code, faites apparaître les blocs sous forme de bouton avec lien</span>
    <span>Note: La boîte de réponse doit contenir autant de boutons qu'il y a de blocs</span>
  </div>

  {% liquid
    # Logique ici
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {% for block in section.blocks %}
      <button>{{ block.settings.text }}</button>
    {% endfor %}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #7: La référence dynamique</h4>
    <span>- Dans le schéma, créez un paramètre de type "product"</span>
    <span>- Dans la back-office, créez un metafield "page" de type "product"</span>
    <span>- Associez un produit au metafield de la page dans le back-office</span>
    <span>- Dans le customiseur, associez le produit du metafield au paramètre de section</span>
    <span>- Affichez le titre du produit dans la boîte de réponse</span>
  </div>

  {% liquid
    # Logique ici
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {{ section.settings.featured_product.title }}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #8: Les paramètres de thème</h4>
    <span>- Dans "settings_schema.json", créez un paramètre de type "select"</span>
    <span>- Dans la boîte de réponse, faite apparaitre la valeur du paramètre de thème</span>
  </div>

  {% liquid
    # Logique ici
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {{ settings.my_select_parameter }}
  </div>

  {% # ------------------------- %}

  <div class="exercise-container">
    <h4 class="title">Exercice #9: Méta-objet</h4>
    <span>- Dans le back-office, créer un méta-objet, définition au choix</span>
    <span>- Pour ce méta-objet, créer une propriété "texte", ID au choix</span>
    <span>- Créer des entrées pour le méta-objet, toujours dans le back-office</span>
    <span>- Dans le code, affichez le texte de vos entrées méta-objet</span>
    <span>- Créez un metafield de type "metaobject" et affichez le texte associé</span>
    <span>- Associez le texte d'un metaobjet en référence dynamique</span>
  </div>

  {% liquid
    # Logique ici
    assign my_metaobject_entries = page.metafields.custom.metaobject_list.value
  %}
  <div class="answer-container">
    {% # Affichage ici %}
    {% for metaobject_entry in my_metaobject_entries %}
      <p>{{ metaobject_entry.title.value }}</p>
    {% endfor %}
  </div>

  {% comment %}
    {% # ------------------------- %}

    <div class="exercise-container">
      <h4 class="title">Exercice #x: </h4>
      <span>- </span>
    </div>

    {% liquid
      # Logique ici
    %}
    <div class="answer-container">
      {% # Affichage ici %}
    </div>
  {% endcomment %}
</div>

{% schema %}
{
  "name": "Exercices Schéma",
  "tag": "section",
  "class": "shopify-section--exercises",
  "blocks": [
    {
      "name": "Bouton",
      "type": "button",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Texte"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "text",
      "id": "first_text",
      "label": "My first text",
      "default": "Hello world"
    },
    {
      "type": "collection",
      "id": "first_collection",
      "label": "My first collection"
    },
    {
      "type": "image_picker",
      "id": "first_image",
      "label": "My first image"
    },
    {
      "type": "color",
      "id": "answer_box_background_color",
      "label": "Couleur de fond boîte de réponse"
    },
    {
      "type": "color",
      "id": "answer_box_color",
      "label": "Couleur texte boîte de réponse"
    },
    {
      "type": "product",
      "id": "featured_product",
      "label": "Produit en vedette"
    }
  ],
  "presets": []
}
{% endschema %}
